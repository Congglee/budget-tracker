// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum TransactionType {
  INCOME
  EXPENSE
}

model User {
  id                 String    @id @default(uuid())
  name               String?
  email              String?   @unique
  emailVerified      DateTime? @map("email_verified")
  image              String?
  password           String?
  isTwoFactorEnabled Boolean   @default(false) @map("is_two_factor_enabled")

  accounts              Account[]
  twoFactorConfirmation TwoFactorConfirmation?
  userSettings          UserSettings?
  categories            Category[]
  transactions          Transaction[]
  histories             History[]
  budgets               Budget[]

  @@map("users")
}

model UserSettings {
  userId   String @id @unique @map("user_id")
  currency String
  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map(name: "user_settings")
}

model Account {
  id                String  @id @default(uuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model VerificationToken {
  id      String   @id @default(uuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
  @@map("verification_tokens")
}

model PasswordResetToken {
  id      String   @id @default(uuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
  @@map("password_reset_tokens")
}

model TwoFactorToken {
  id      String   @id @default(uuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
  @@map("two_factor_tokens")
}

model TwoFactorConfirmation {
  id     String @id @default(uuid())
  userId String @map("user_id")
  User   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
  @@map("two_factor_confirmations")
}

model Transaction {
  id          String          @id @default(uuid())
  name        String
  amount      Float
  description String?
  date        DateTime
  type        TransactionType @default(INCOME)

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  userId String @map("user_id")
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  categoryId String   @map("category_id")
  category   Category @relation(fields: [categoryId], references: [id])

  budgetId String? @map("budget_id")
  budget   Budget? @relation(fields: [budgetId], references: [id])

  @@map(name: "transactions")
}

model Category {
  id   String          @id @default(uuid())
  name String
  type TransactionType @default(INCOME)
  icon String

  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @updatedAt @map(name: "updated_at")

  userId       String        @map("user_id")
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  transactions Transaction[]
  budgets      Budget[]

  @@unique([name, type, userId])
  @@map(name: "categories")
}

model Budget {
  id         String    @id @default(uuid())
  name       String
  amount     Float
  totalSpent Float     @default(0) @map("total_spent")
  remaining  Float     @default(0)
  startDate  DateTime? @map("start_date")
  endDate    DateTime? @map("end_date")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  userId String @map("user_id")
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  categoryId String   @map("category_id")
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  transactions Transaction[]

  @@unique([name, userId])
  @@map(name: "budgets")
}

model History {
  id      String @id @default(uuid())
  day     Int?
  month   Int?
  year    Int
  income  Float
  expense Float
  userId  String @map("user_id")
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([day, month, year, userId])
  @@map(name: "histories")
}
